#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <ESP8266WiFi.h>
#include "HTTPSRedirect.h"
#include "DebugMacros.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

extern const char* ssid;
extern const char* password;
extern const char* host;
extern const char *GScriptId;

String url_read = String("/macros/s/") + GScriptId + "/exec?read";
String url_write = String("/macros/s/") + GScriptId + "/exec?write";
const uint16_t httpsPort = 443;

// Use WiFiClient class to create TCP connections
HTTPSRedirect* client = nullptr;
String result; 

void setup() {
  //display setup
  Serial.begin(115200);
  Serial.flush();
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  
  // Display static text
  display.println("Hello :)");
  display.display(); 
  delay(2000);
  display.clearDisplay();

  //WIFI connection
  display.print("Connecting to:");
  display.display();
  display.println(ssid);
  display.display();
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    display.print(".");
    display.display();
  }
  
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("WiFi connected");
  display.display();
  display.println(WiFi.localIP());
  display.display();

   // Use HTTPSRedirect class to create a new TLS connection
  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();
  client->setPrintResponseBody(true);
  client->setContentTypeHeader("application/json");

  Serial.print("Connecting to ");
  Serial.println(host);

  // Try to connect for a maximum of 5 times
  bool flag = false;
  for (int i=0; i<5; i++){
    int retval = client->connect(host, httpsPort);
    if (retval == 1) {
       flag = true;
       break;
    }
    else
      Serial.println("Connection failed. Retrying...");
  }

  if (!flag){
    Serial.print("Could not connect to server: ");
    Serial.println(host);
    Serial.println("Exiting...");
    return;
  }
  client->GET(url_read, host);
  result = client->getResponseBody();
  display.println(result);
  display.display();
  // delete HTTPSRedirect object
  delete client;
  client = nullptr;
}

void loop(){
 get_data();
 delay(4000);
}

void get_data(){
 static bool flag = false; 
 client = new HTTPSRedirect(httpsPort);
 client->setInsecure();
 client->setPrintResponseBody(true);
 client->setContentTypeHeader("application/json");

 if (client != nullptr){
  if(!client->connected()){
    client->connect(host, httpsPort);
    client->GET(url_read, host);
    result = client->getResponseBody();
    process_data(result);
    }
  }
  delete client;
  client = nullptr;
}

void process_data(String data){
    if( !data.startsWith("gfx")){
      display.clearDisplay();
      display.setCursor(10,0);
      display.println(data);
      display.display();
    }
    else{
      display.clearDisplay();
      display.setCursor(10,0);
      display.println("TODO");
      display.display();
      }
  }
  
